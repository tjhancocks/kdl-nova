` Copyright (c) 2019-2020 Tom Hancocks
`
` Permission is hereby granted, free of charge, to any person obtaining a copy
` of this software and associated documentation files (the "Software"), to deal
` in the Software without restriction, including without limitation the rights
` to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
` copies of the Software, and to permit persons to whom the Software is
` furnished to do so, subject to the following conditions:
`
` The above copyright notice and this permission notice shall be included in all
` copies or substantial portions of the Software.
`
` THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
` IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
` FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
` AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
` LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
` OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
` SOFTWARE.

` The cölr resource allows you to customize some game-wide interface options.
` The various interface buttons that appear are drawn on the fly. Nova uses PICT
` resources 7500-7502 for the left, centre, and right pieces of the "up"
` buttons, PICT resources 7503-7505 for the "down" button pieces, and PICT
` resources 7506-7508 for the greyed-out button pieces. Corresponding mask
` images are stored in PICTs 7600-7608. STR# resource 150 is used to store the
` text that appears on each button type.
` Note that all color fields in the cölr resource are encoded the same as HTML
` colors, and that only the first cölr resource is loaded.

@type Theme : "cölr" {
    template {
        HLNG ButtonUp;
        HLNG ButtonDown;
        HLNG ButtonGrey;
        C040 MenuFont;
        DWRD MenuFontSize;
        HLNG MenuColor1;
        HLNG MenuColor2;
        HLNG GridBright;
        HLNG GridDim;
        RECT ProgressBar;
        HLNG ProgBright;
        HLNG ProgDim;
        HLNG ProgOutline;
        DWRD MenuButtonX1;
        DWRD MenuButtonY1;
        DWRD MenuButtonX2;
        DWRD MenuButtonY2;
        DWRD MenuButtonX3;
        DWRD MenuButtonY3;
        DWRD MenuButtonX4;
        DWRD MenuButtonY4;
        DWRD MenuButtonX5;
        DWRD MenuButtonY5;
        DWRD MenuButtonX6;
        DWRD MenuButtonY6;
        HLNG FloatingMap;
        HLNG ListText;
        HLNG ListBkgnd;
        HLNG ListHilite;
        HLNG EscortHilite;
        C040 ButtonFont;
        DWRD ButtonFontSz;
        DWRD LogoX;
        DWRD LogoY;
        DWRD RolloverX;
        DWRD RolloverY;
        DWRD SlideX1;
        DWRD SlideY1;
        DWRD SlideX2;
        DWRD SlideY2;
        DWRD SlideX3;
        DWRD SlideY3;
    };

    ` Normal button text color.
    field("ButtonUpColor") {
        ButtonUp as Color;
    };

    ` Pressed button text color.
    field("ButtonDownColor") {
        ButtonDown as Color;
    };

    ` Greyed-out button text color.
    field("ButtonDisabledColor") {
        ButtonGrey as Color;
    };

    ` Main menu font size and name.
    field("MenuFont") {
        MenuFontSize;
        MenuFont;
    };

    ` Bright color for the main menu
    field("MenuColorBright") {
        MenuColor1 as Color;
    };

    ` Dim color for the main menu
    field("MenuColorDim") {
        MenuColor2 as Color;
    };

    ` Shipyard/outfit dialog selection square color.
    field("GridColorBright") {
        GridBright as Color;
    };

    ` Shipyard/outfit dialog grid color.
    field("GridColorDim") {
        GridDim as Color;
    };

    ` Position and shape of the loading progress bar, relative to the centre of
    ` the window.
    field("ProgressBarBounds") {
        ProgressBar;
    };

    ` Bright progress bar color.
    field("ProgressBarColorBright") {
        ProgBright;
    };

    ` Dim progress bar color .
    field("ProgressBarColorDim") {
        ProgDim as Color;
    };

    ` Progress bar outline color.
    field("ProgressBarColorOutline") {
        ProgOutline as Color;
    };

    ` Position of the six main menu buttons, relative to the top left corner of
    ` a 1024x768 main menu background.
    field("MenuButtons") repeatable<1, 6> {
        MenuButtonX<$FieldNumber>;
        MenuButtonY<$FieldNumber>;
    };

    ` Floating hyperspace map / escort menu border color.
    field("FloatingMapColor") {
        FloatingMap as Color;
    };

    ` List text color.
    field("ListTextColor") {
        ListText as Color;
    };

    ` List background color.
    field("ListBackgroundColor") {
        ListBkgnd as Color;
    };

    ` List highlight color.
    field("ListHighlightColor") {
        ListHilite as Color;
    };

    ` Escort menu item highlight color
    field("EscortMenuHighlightColor") {
        EscortHilite as Color;
    };

    ` Button font size and name.
    field("ButtonFont") {
        ButtonFontSz;
        ButtonFont;
    };

    ` Logo animation x/y position.
    field("Logo") {
        LogoX;
        LogoY;
    };

    ` Rollover animation x/y position.
    field("Rollover") {
        RolloverX;
        RolloverY;
    };

    ` Sliding button x/y positions.
    field("Slides") repeatable<1, 3> {
        SlideX<$FieldNumber>;
        SlideY<$FieldNumber>;
    };
};

@example declare Theme {
    new(#128, "Example Theme") {
        ButtonUpColor = rgb(255, 0, 0);
        ButtonDownColor = rgb(0, 255, 0);
        ButtonDisabledColor = 0x0000FF;
        MenuFont = 12 "Arial";
        ProgressBarBounds = 20 20 120 30;
    };
};
